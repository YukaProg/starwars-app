{"version":3,"sources":["components/Card.js","components/CardList.js","components/FilterBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","name","Object","entries","map","planet","CardList","_ref","planets","i","components_Card","key","rotation","rotation_period","orbital","orbital_period","diameter","climate","gravity","population","FilterBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","fetch","then","resp","json","data","results","_this$state","filteredPlanets","filter","toLowerCase","includes","components_FilterBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAkBeA,EAfF,SAACC,GAEZ,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,8FACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBJ,EAAMK,MAC3CJ,EAAAC,EAAAC,cAAA,WACCG,OAAOC,QAAQP,GAAOQ,IAAI,SAACC,GAAD,OAAWR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBK,EAAO,GAA3C,KAAiDA,EAAO,SCevFC,EAtBE,SAAAC,GAAe,IAAbC,EAAaD,EAAbC,QACjB,OACEX,EAAAC,EAAAC,cAAA,WACGS,EAAQJ,IAAI,SAACC,EAAQI,GACpB,OACEZ,EAAAC,EAAAC,cAACW,EAAD,CACEC,IAAKF,EACLR,KAAMO,EAAQC,GAAGR,KACjBW,SAAUJ,EAAQC,GAAGI,gBACrBC,QAAWN,EAAQC,GAAGM,eACtBC,SAAYR,EAAQC,GAAGO,SACvBC,QAAWT,EAAQC,GAAGQ,QACtBC,QAAWV,EAAQC,GAAGS,QACtBC,WAAcX,EAAQC,GAAGU,iBCDtBC,EAbG,SAAAb,GAAmB,IAAjBc,EAAiBd,EAAjBc,aAClB,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACAuB,KAAK,SACLtB,UAAU,sDACVuB,YAAY,wBACZC,SAAYH,MCEHI,EARA,SAAC7B,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAK2B,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEjC,EAAMkC,WC0CEC,qBAvCZ,SAAAA,IAAa,IAAAC,EAAA,OAAA9B,OAAA+B,EAAA,EAAA/B,CAAAgC,KAAAH,IACVC,EAAA9B,OAAAiC,EAAA,EAAAjC,CAAAgC,KAAAhC,OAAAkC,EAAA,EAAAlC,CAAA6B,GAAAM,KAAAH,QAcFI,eAAiB,SAACC,GAChBP,EAAKQ,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzCX,EAAKY,MAAQ,CACXpC,QAAS,GACTiC,YAAa,IALLT,mFASO,IAAAa,EAAAX,KACjBY,MAAM,iCACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GAAI,OAAIL,EAAKL,SAAS,CAAChC,QAAS0C,EAAKC,6CASxC,IAAAC,EACwBlB,KAAKU,MAA7BpC,EADA4C,EACA5C,QAASiC,EADTW,EACSX,YACVY,EAAkB7C,EAAQ8C,OAAO,SAAAjD,GACrC,OAAQA,EAAOJ,KAAKsD,cAAcC,SAASf,EAAYc,iBAEzD,OACE1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,mCAAhB,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,iCAAhB,mBACAH,EAAAC,EAAAC,cAAC0D,EAAD,CAAWpC,aAAca,KAAKI,iBAC9BzC,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,CAAUnD,QAAW6C,aAjCbO,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.b8634034.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = (props) => {\n\n  return (\n    <article className=\"tc bg-near-black dib br3 pa3 ma3 grow ba b--green b--dashed bw2 w-80 w-30-m w-20-l w-80-ns\">\n      <div className=\"tc\">\n        <h3 className=\"f3 mb2 light-green \">{props.name}</h3>\n        <hr/>\n        {Object.entries(props).map((planet)=> <h4 className=\"f5 fw4 light-green\">{planet[0]}: {planet[1]}</h4> )} \n       \n      </div>\n    </article>\n\n    )\n}\n\nexport default Card;\n\n\n//, diameter, climate, gravity, population\n\n        // <h4 className=\"f5 fw4 light-green mt0\">Diameter: {diameter}</h4>\n        // <h4 className=\"f5 fw4 light-green mt0\">Climate: {climate}</h4>\n        // <h4 className=\"f5 fw4 light-green mt0\">Gravity: {gravity}</h4>\n        // <h4 className=\"f5 fw4 light-green mt0\">Population: {population}</h4>\n\n\n        ","import React from 'react';\nimport Card from '../components/Card';\n\nconst CardList = ({planets}) => {\n  return(\n    <div>\n      {planets.map((planet, i) => {\n        return(\n          <Card\n            key={i}\n            name={planets[i].name}\n            rotation={planets[i].rotation_period}\n            orbital = {planets[i].orbital_period}\n            diameter = {planets[i].diameter}\n            climate = {planets[i].climate}\n            gravity = {planets[i].gravity}\n            population = {planets[i].population}\n          />\n          );\n        })\n      }\n    </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst FilterBox = ({searchChange}) =>{\n  return(\n    <div className='pa2'>\n      <input \n      type='search' \n      className='pa3-ns pa3-m pa3-l pa2 ba b--green bg-lightest-blue' \n      placeholder='filter by planet name' \n      onChange = {searchChange}\n      />\n    </div>\n    )\n}\n\nexport default FilterBox;\n\n","import React from 'react';\n\n\nconst Scroll = (props) =>{\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '430px'}}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport FilterBox from '../components/FilterBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n//import {planets} from '../components/planets.js';\n\nclass App extends Component {\n   constructor(){\n      super()\n      //state can change. react read this state and render and path down this state as property. ANd property can not change.\n      this.state = {\n        planets: [],\n        searchField: ''\n      }\n    }\n\n    componentDidMount(){\n      fetch('https://swapi.co/api/planets/')\n        .then(resp => resp.json())\n        .then(data => this.setState({planets: data.results}));\n    }\n\n    onSearchChange = (event) => {\n      this.setState({searchField: event.target.value});\n    }\n\n    //make sure methods are xxxx = (xxxx) => {...} so App confines 'this'\n\n  render() {\n    const {planets, searchField} = this.state;\n    const filteredPlanets = planets.filter(planet =>{\n      return (planet.name.toLowerCase().includes(searchField.toLowerCase()) )     \n    });\n    return (\n      <div className=\"App bg tc\">\n        <h1 className = 'tc f-headline f3 f1-ns lh-solid'>Star Wars</h1>\n        <h2 className = 'tc f4 f2-ns f2-m f2-l lh-copy'>PLANET DATABASE</h2>\n        <FilterBox searchChange={this.onSearchChange}/>\n        <Scroll>\n          <CardList planets = {filteredPlanets}/>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}